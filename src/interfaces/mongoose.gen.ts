/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from "mongoose";

/**
 * Lean version of AccountDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `AccountDocument.toObject()`. To avoid conflicts with model names, use the type alias `AccountObject`.
 * ```
 * const accountObject = account.toObject();
 * ```
 */
export type Account = {
programs: string[];
courses: any[];
username: string;
email: string;
password: string;
_id: mongoose.Types.ObjectId;
createdAt?: Date;
updatedAt?: Date;
}

/**
 * Lean version of AccountDocument (type alias of `Account`)
 * 
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Account } from "../models"
 * import { AccountObject } from "../interfaces/mongoose.gen.ts"
 * 
 * const accountObject: AccountObject = account.toObject();
 * ```
 */
export type AccountObject = Account

/**
 * Mongoose Query type
 * 
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type AccountQuery = mongoose.Query<any, AccountDocument, AccountQueries> & AccountQueries

/**
 * Mongoose Query helper types
 * 
 * This type represents `AccountSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type AccountQueries = {
}

export type AccountMethods = {
}

export type AccountStatics = {
}

/**
 * Mongoose Model type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Account = mongoose.model<AccountDocument, AccountModel>("Account", AccountSchema);
 * ```
 */
export type AccountModel = mongoose.Model<AccountDocument, AccountQueries> & AccountStatics

/**
 * Mongoose Schema type
 * 
 * Assign this type to new Account schema instances:
 * ```
 * const AccountSchema: AccountSchema = new mongoose.Schema({ ... })
 * ```
 */
export type AccountSchema = mongoose.Schema<AccountDocument, AccountModel, AccountMethods, AccountQueries>

/**
 * Mongoose Document type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Account = mongoose.model<AccountDocument, AccountModel>("Account", AccountSchema);
 * ```
 */
export type AccountDocument = mongoose.Document<mongoose.Types.ObjectId, AccountQueries> & AccountMethods & {
programs: mongoose.Types.Array<string>;
courses: mongoose.Types.Array<any>;
username: string;
email: string;
password: string;
_id: mongoose.Types.ObjectId;
createdAt?: Date;
updatedAt?: Date;
}

/**
 * Lean version of CourseSetDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `CourseSetDocument.toObject()`. To avoid conflicts with model names, use the type alias `CourseSetObject`.
 * ```
 * const coursesetObject = courseset.toObject();
 * ```
 */
export type CourseSet = {
course_list: string[];
description?: string;
id: string;
name: string;
structure: Map<string, any>;
type: "static" | "dynamic";
_id: mongoose.Types.ObjectId;
createdAt?: Date;
updatedAt?: Date;
}

/**
 * Lean version of CourseSetDocument (type alias of `CourseSet`)
 * 
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { CourseSet } from "../models"
 * import { CourseSetObject } from "../interfaces/mongoose.gen.ts"
 * 
 * const coursesetObject: CourseSetObject = courseset.toObject();
 * ```
 */
export type CourseSetObject = CourseSet

/**
 * Mongoose Query type
 * 
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type CourseSetQuery = mongoose.Query<any, CourseSetDocument, CourseSetQueries> & CourseSetQueries

/**
 * Mongoose Query helper types
 * 
 * This type represents `CourseSetSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type CourseSetQueries = {
}

export type CourseSetMethods = {
}

export type CourseSetStatics = {
}

/**
 * Mongoose Model type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const CourseSet = mongoose.model<CourseSetDocument, CourseSetModel>("CourseSet", CourseSetSchema);
 * ```
 */
export type CourseSetModel = mongoose.Model<CourseSetDocument, CourseSetQueries> & CourseSetStatics

/**
 * Mongoose Schema type
 * 
 * Assign this type to new CourseSet schema instances:
 * ```
 * const CourseSetSchema: CourseSetSchema = new mongoose.Schema({ ... })
 * ```
 */
export type CourseSetSchema = mongoose.Schema<CourseSetDocument, CourseSetModel, CourseSetMethods, CourseSetQueries>

/**
 * Mongoose Document type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const CourseSet = mongoose.model<CourseSetDocument, CourseSetModel>("CourseSet", CourseSetSchema);
 * ```
 */
export type CourseSetDocument = mongoose.Document<mongoose.Types.ObjectId, CourseSetQueries> & CourseSetMethods & {
course_list: mongoose.Types.Array<string>;
description?: string;
id: string;
name: string;
structure: mongoose.Types.Map<any>;
type: "static" | "dynamic";
_id: mongoose.Types.ObjectId;
createdAt?: Date;
updatedAt?: Date;
}

/**
 * Lean version of CatalogCourseDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `CatalogCourseDocument.toObject()`. To avoid conflicts with model names, use the type alias `CatalogCourseObject`.
 * ```
 * const catalogcourseObject = catalogcourse.toObject();
 * ```
 */
export type CatalogCourse = {
active?: boolean;
aka?: string;
antireq?: any;
antireq_text?: string;
career?: string;
cid?: string;
code?: string;
components: string[];
coreq?: any;
coreq_text?: string;
course_group_id?: string;
course_number?: string;
coursedog_id?: string;
units?: number;
departments: string[];
description?: string;
faculty_code?: string;
faculty_name?: string;
grade_mode_code?: string;
grade_mode_name?: string;
long_name?: string;
multi_term?: boolean;
name?: string;
nogpa?: boolean;
notes?: string;
prereq?: any;
prereq_text?: string;
repeatable?: boolean;
start_term?: Map<string, any>;
subject_code?: string;
topics: (Map<string, any>)[];
version?: number;
_id: mongoose.Types.ObjectId;
createdAt?: Date;
updatedAt?: Date;
}

/**
 * Lean version of CatalogCourseDocument (type alias of `CatalogCourse`)
 * 
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { CatalogCourse } from "../models"
 * import { CatalogCourseObject } from "../interfaces/mongoose.gen.ts"
 * 
 * const catalogcourseObject: CatalogCourseObject = catalogcourse.toObject();
 * ```
 */
export type CatalogCourseObject = CatalogCourse

/**
 * Mongoose Query type
 * 
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type CatalogCourseQuery = mongoose.Query<any, CatalogCourseDocument, CatalogCourseQueries> & CatalogCourseQueries

/**
 * Mongoose Query helper types
 * 
 * This type represents `CatalogCourseSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type CatalogCourseQueries = {
}

export type CatalogCourseMethods = {
}

export type CatalogCourseStatics = {
}

/**
 * Mongoose Model type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const CatalogCourse = mongoose.model<CatalogCourseDocument, CatalogCourseModel>("CatalogCourse", CatalogCourseSchema);
 * ```
 */
export type CatalogCourseModel = mongoose.Model<CatalogCourseDocument, CatalogCourseQueries> & CatalogCourseStatics

/**
 * Mongoose Schema type
 * 
 * Assign this type to new CatalogCourse schema instances:
 * ```
 * const CatalogCourseSchema: CatalogCourseSchema = new mongoose.Schema({ ... })
 * ```
 */
export type CatalogCourseSchema = mongoose.Schema<CatalogCourseDocument, CatalogCourseModel, CatalogCourseMethods, CatalogCourseQueries>

/**
 * Mongoose Document type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const CatalogCourse = mongoose.model<CatalogCourseDocument, CatalogCourseModel>("CatalogCourse", CatalogCourseSchema);
 * ```
 */
export type CatalogCourseDocument = mongoose.Document<mongoose.Types.ObjectId, CatalogCourseQueries> & CatalogCourseMethods & {
active?: boolean;
aka?: string;
antireq?: any;
antireq_text?: string;
career?: string;
cid?: string;
code?: string;
components: mongoose.Types.Array<string>;
coreq?: any;
coreq_text?: string;
course_group_id?: string;
course_number?: string;
coursedog_id?: string;
units?: number;
departments: mongoose.Types.Array<string>;
description?: string;
faculty_code?: string;
faculty_name?: string;
grade_mode_code?: string;
grade_mode_name?: string;
long_name?: string;
multi_term?: boolean;
name?: string;
nogpa?: boolean;
notes?: string;
prereq?: any;
prereq_text?: string;
repeatable?: boolean;
start_term?: mongoose.Types.Map<any>;
subject_code?: string;
topics: mongoose.Types.Array<mongoose.Types.Map<any>>;
version?: number;
_id: mongoose.Types.ObjectId;
createdAt?: Date;
updatedAt?: Date;
}

/**
 * Lean version of DepartmentDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `DepartmentDocument.toObject()`. To avoid conflicts with model names, use the type alias `DepartmentObject`.
 * ```
 * const departmentObject = department.toObject();
 * ```
 */
export type Department = {
id: string;
display_name: string;
name: string;
_id: mongoose.Types.ObjectId;
createdAt?: Date;
updatedAt?: Date;
}

/**
 * Lean version of DepartmentDocument (type alias of `Department`)
 * 
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Department } from "../models"
 * import { DepartmentObject } from "../interfaces/mongoose.gen.ts"
 * 
 * const departmentObject: DepartmentObject = department.toObject();
 * ```
 */
export type DepartmentObject = Department

/**
 * Mongoose Query type
 * 
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type DepartmentQuery = mongoose.Query<any, DepartmentDocument, DepartmentQueries> & DepartmentQueries

/**
 * Mongoose Query helper types
 * 
 * This type represents `DepartmentSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type DepartmentQueries = {
}

export type DepartmentMethods = {
}

export type DepartmentStatics = {
}

/**
 * Mongoose Model type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Department = mongoose.model<DepartmentDocument, DepartmentModel>("Department", DepartmentSchema);
 * ```
 */
export type DepartmentModel = mongoose.Model<DepartmentDocument, DepartmentQueries> & DepartmentStatics

/**
 * Mongoose Schema type
 * 
 * Assign this type to new Department schema instances:
 * ```
 * const DepartmentSchema: DepartmentSchema = new mongoose.Schema({ ... })
 * ```
 */
export type DepartmentSchema = mongoose.Schema<DepartmentDocument, DepartmentModel, DepartmentMethods, DepartmentQueries>

/**
 * Mongoose Document type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Department = mongoose.model<DepartmentDocument, DepartmentModel>("Department", DepartmentSchema);
 * ```
 */
export type DepartmentDocument = mongoose.Document<mongoose.Types.ObjectId, DepartmentQueries> & DepartmentMethods & {
id: string;
display_name: string;
name: string;
_id: mongoose.Types.ObjectId;
createdAt?: Date;
updatedAt?: Date;
}

/**
 * Lean version of ProgramDocument
 * 
 * This has all Mongoose getters & functions removed. This type will be returned from `ProgramDocument.toObject()`. To avoid conflicts with model names, use the type alias `ProgramObject`.
 * ```
 * const programObject = program.toObject();
 * ```
 */
export type Program = {
active?: boolean;
admission_info: string;
career: string;
code: string;
coursedog_id: string;
degree_designation_code: string;
degree_designation_name: string;
departments: string[];
display_name: string;
general_info: string;
long_name: string;
name: string;
program_group_id: string;
requisites: any[];
start_term: Map<string, any>;
transcript_description: string;
transcript_level: string;
type: string;
version: number;
_id: mongoose.Types.ObjectId;
}

/**
 * Lean version of ProgramDocument (type alias of `Program`)
 * 
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Program } from "../models"
 * import { ProgramObject } from "../interfaces/mongoose.gen.ts"
 * 
 * const programObject: ProgramObject = program.toObject();
 * ```
 */
export type ProgramObject = Program

/**
 * Mongoose Query type
 * 
 * This type is returned from query functions. For most use cases, you should not need to use this type explicitly.
 */
export type ProgramQuery = mongoose.Query<any, ProgramDocument, ProgramQueries> & ProgramQueries

/**
 * Mongoose Query helper types
 * 
 * This type represents `ProgramSchema.query`. For most use cases, you should not need to use this type explicitly.
 */
export type ProgramQueries = {
}

export type ProgramMethods = {
}

export type ProgramStatics = {
}

/**
 * Mongoose Model type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Program = mongoose.model<ProgramDocument, ProgramModel>("Program", ProgramSchema);
 * ```
 */
export type ProgramModel = mongoose.Model<ProgramDocument, ProgramQueries> & ProgramStatics

/**
 * Mongoose Schema type
 * 
 * Assign this type to new Program schema instances:
 * ```
 * const ProgramSchema: ProgramSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ProgramSchema = mongoose.Schema<ProgramDocument, ProgramModel, ProgramMethods, ProgramQueries>

/**
 * Mongoose Document type
 * 
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Program = mongoose.model<ProgramDocument, ProgramModel>("Program", ProgramSchema);
 * ```
 */
export type ProgramDocument = mongoose.Document<mongoose.Types.ObjectId, ProgramQueries> & ProgramMethods & {
active?: boolean;
admission_info: string;
career: string;
code: string;
coursedog_id: string;
degree_designation_code: string;
degree_designation_name: string;
departments: mongoose.Types.Array<string>;
display_name: string;
general_info: string;
long_name: string;
name: string;
program_group_id: string;
requisites: mongoose.Types.Array<any>;
start_term: mongoose.Types.Map<any>;
transcript_description: string;
transcript_level: string;
type: string;
version: number;
_id: mongoose.Types.ObjectId;
}

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 * 
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
  return doc instanceof mongoose.Document;
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string 
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never;

/**
* Helper type used by `PopulatedDocument`. Returns the child property of a string 
* representing a nested property (i.e. `friend.user` -> `user`).
*/
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never;

/**
* Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated 
* for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
*/
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & { 
  [ref in T]: Root[T] extends mongoose.Types.Array<infer U> ? 
    mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>> :
    Exclude<Root[T], mongoose.Types.ObjectId> 
}

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<
DocType,
T
> = T extends keyof DocType
? PopulatedProperty<DocType, T> 
: (
    ParentProperty<T> extends keyof DocType
      ? Omit<DocType, ParentProperty<T>> &
      {
        [ref in ParentProperty<T>]: (
          DocType[ParentProperty<T>] extends mongoose.Types.Array<infer U> ? (
            mongoose.Types.Array<
              ChildProperty<T> extends keyof U 
                ? PopulatedProperty<U, ChildProperty<T>> 
                : PopulatedDocument<U, ChildProperty<T>>
            >
          ) : (
            ChildProperty<T> extends keyof DocType[ParentProperty<T>]
            ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
            : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>
          )
        )
      }
      : DocType
  )

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T;
type Modify<T, R> = Omit<T, keyof R> & R;

/**
 * Augment mongoose with Query.populate overloads
 */
declare module "mongoose" {
  interface Query<ResultType, DocType, THelpers = {}> {
    populate<T extends string>(path: T, select?: string | any, model?: string | Model<any, THelpers>, match?: any): Query<
      ResultType extends Array<DocType> ? Array<PopulatedDocument<Unarray<ResultType>, T>> : (ResultType extends DocType ? PopulatedDocument<Unarray<ResultType>, T> : ResultType),
      DocType,
      THelpers
    > & THelpers;

    populate<T extends string>(options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>): Query<
      ResultType extends Array<DocType> ? Array<PopulatedDocument<Unarray<ResultType>, T>> : (ResultType extends DocType ? PopulatedDocument<Unarray<ResultType>, T> : ResultType),
      DocType,
      THelpers
    > & THelpers;
  }
}



